// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: links.sql

package supabase

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (group_id, user_id, url, title, comment)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, group_id, user_id, url, title, comment, created_at
`

type CreateLinkParams struct {
	GroupID pgtype.UUID
	UserID  pgtype.UUID
	Url     string
	Title   pgtype.Text
	Comment pgtype.Text
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink,
		arg.GroupID,
		arg.UserID,
		arg.Url,
		arg.Title,
		arg.Comment,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1 AND user_id = $2
`

type DeleteLinkParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteLink(ctx context.Context, arg DeleteLinkParams) error {
	_, err := q.db.Exec(ctx, deleteLink, arg.ID, arg.UserID)
	return err
}

const getLinkByID = `-- name: GetLinkByID :one
SELECT id, group_id, user_id, url, title, comment, created_at FROM links
WHERE id = $1
`

func (q *Queries) GetLinkByID(ctx context.Context, id pgtype.UUID) (Link, error) {
	row := q.db.QueryRow(ctx, getLinkByID, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.Url,
		&i.Title,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const getLinksByGroup = `-- name: GetLinksByGroup :many
SELECT id, group_id, user_id, url, title, comment, created_at FROM links
WHERE group_id = $1
ORDER BY created_at DESC
    LIMIT $2 OFFSET $3
`

type GetLinksByGroupParams struct {
	GroupID pgtype.UUID
	Limit   int32
	Offset  int32
}

func (q *Queries) GetLinksByGroup(ctx context.Context, arg GetLinksByGroupParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, getLinksByGroup, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.UserID,
			&i.Url,
			&i.Title,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLinkComment = `-- name: UpdateLinkComment :exec
UPDATE links
SET comment = $1
WHERE id = $2 AND user_id = $3
`

type UpdateLinkCommentParams struct {
	Comment pgtype.Text
	ID      pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) UpdateLinkComment(ctx context.Context, arg UpdateLinkCommentParams) error {
	_, err := q.db.Exec(ctx, updateLinkComment, arg.Comment, arg.ID, arg.UserID)
	return err
}
