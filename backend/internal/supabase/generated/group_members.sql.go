// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: group_members.sql

package supabase

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO group_members (user_id, group_id)
VALUES ($1, $2)
    ON CONFLICT DO NOTHING
`

type AddUserToGroupParams struct {
	UserID  pgtype.UUID
	GroupID pgtype.UUID
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.Exec(ctx, addUserToGroup, arg.UserID, arg.GroupID)
	return err
}

const getGroupMembers = `-- name: GetGroupMembers :many
SELECT user_id FROM group_members
WHERE group_id = $1
`

func (q *Queries) GetGroupMembers(ctx context.Context, groupID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getGroupMembers, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var user_id pgtype.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsForUser = `-- name: GetGroupsForUser :many
SELECT group_id FROM group_members
WHERE user_id = $1
`

func (q *Queries) GetGroupsForUser(ctx context.Context, userID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getGroupsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var group_id pgtype.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserInGroup = `-- name: IsUserInGroup :one
SELECT EXISTS (
    SELECT 1 FROM group_members
    WHERE group_id = $1 AND user_id = $2
) AS exists
`

type IsUserInGroupParams struct {
	GroupID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) IsUserInGroup(ctx context.Context, arg IsUserInGroupParams) (bool, error) {
	row := q.db.QueryRow(ctx, isUserInGroup, arg.GroupID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
