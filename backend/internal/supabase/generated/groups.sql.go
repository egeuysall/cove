// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: groups.sql

package supabase

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name, created_by)
VALUES ($1, $2)
    RETURNING id, name, created_by, created_at
`

type CreateGroupParams struct {
	Name      string
	CreatedBy pgtype.UUID
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.CreatedBy)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1 AND created_by = $2
`

type DeleteGroupParams struct {
	ID        pgtype.UUID
	CreatedBy pgtype.UUID
}

func (q *Queries) DeleteGroup(ctx context.Context, arg DeleteGroupParams) error {
	_, err := q.db.Exec(ctx, deleteGroup, arg.ID, arg.CreatedBy)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, name, created_by, created_at FROM groups
WHERE id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context, id pgtype.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupsByUser = `-- name: GetGroupsByUser :many
SELECT g.id, g.name, g.created_by, g.created_at
FROM groups g
         JOIN group_members gm ON gm.group_id = g.id
WHERE gm.user_id = $1
ORDER BY g.created_at DESC
`

func (q *Queries) GetGroupsByUser(ctx context.Context, userID pgtype.UUID) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroupsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
